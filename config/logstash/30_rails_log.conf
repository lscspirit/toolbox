input {
  # Rails Log File
  # Specify where your log files are in the "path" option below
  file {
    type => 'ror'
    path => '/workspace/curryandfishball/projects/Nova/log/development.log'
  }
}

filter {
  #####################################
  # Rails Log Filters (type => 'ror') #
  ##################################### 

  # Removes the Linux color codes in each entry
  mutate {
    type => 'ror'
    gsub => ["@message", "\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]", ""]
  }

  # Groups log entry with multiple lines into one event.
  # Here I assume each log entry starts with a timestamp and a process id
  multiline {
    type => 'ror'
    pattern => "^%{TIMESTAMP_ISO8601} #%{POSINT}"
    negate => true
    what => "previous"
  }

  #
  # Log Parsing
  # 

  # Extracts all common info from an log entry
  #  ** Fields **
  #   timestamp  - (temp) Timestamp of the log entry. This field is only temporary and is available for use until the last filter. 
  #                Its value will be assigned to event's @timestamp and the field itself will be removed.
  #   pid        - Process ID 
  #   log_level  - Rails log level (i.e. DEBUG, FATAL, ERROR, WARN, INFO)
  #   request_id - Request ID
  #   log_entry  - (temp) The log message content. This field is only temporary and is available for use until the last filter.  
  grok {
    type => 'ror'
    singles => true
    pattern => ["(?m)^%{TIMESTAMP_ISO8601:timestamp} #%{POSINT:pid} - \[%{RUBY_LOGLEVEL:log_level}\](?: \[(?<request_id>\w+)\])? *%{GREEDYDATA:log_entry}"]
  }

  # Drops any event with an empty log_entry field (i.e. an log entry with a blank message)
  grep {
    type => 'ror'
    match => ["log_entry", "\S+"]
  }

  # Assigns the "timestamp" field value to event's @timestamp 
  date {
    type => 'ror'
    match => ["timestamp", "ISO8601"]
  }

  # Parses and extracts data from the request's "Started" entry
  #  ** Fields **
  #   method    - REST method of the request (i.e. POST, GET, PUT, DELETE)
  #   uri       - Requested URI
  #   client_ip - Client IP Address
  grok {
    type => 'ror'
    exclude_tags => ["matched", "multiline"]
    singles => true
    match => ["log_entry", "^ *Started (?<method>POST|GET|PUT|DELETE) \"%{URIPATH:uri}%{URIPARAM}?\" for %{IP:client_ip}"] 
    add_tag => ["request_start", "matched"]
  }

  # Parses and extracts data from the request's "Processing" entry
  #  ** Fields **
  #   controller   - Rails controller responding to this request
  #   action       - Controller action that handles the request
  #   format       - Requested format (e.g. HTML, JSON)  
  grok {
    type => 'ror'
    exclude_tags => ["matched", "multiline"]
    singles => true
    match => ["log_entry", "^ *Processing by (?<controller>\w+)#(?<action>\w+) as %{GREEDYDATA:format}"] 
    add_tag => ["request_processed_by", "matched"]
  }

  # Parses and extracts data from the request's "Rendered" entry
  #  ** Fields **
  #   render_path   - View or template rendered
  #   render_time   - The time it took to render the view/template
  grok {
    type => 'ror'
    exclude_tags => ["matched", "multiline"]
    singles => true
    match => ["log_entry", "^ *Rendered (?<render_path>(?>/?(?>[\w_%!$@:.,-]+|\\.)*)+).*\(%{NUMBER:render_time}ms\)"]
    add_tag => ["request_rendered", "matched"]
  }

  # Parses and extracts data from the request's "Completed" entry
  #  ** Fields **
  #   status         - HTTP response status
  #   response_time  - total time it took to complete the request (in milliseconds)
  #   view_time      - total time took to render all views (in milliseconds) 
  #   ar_time        - total time took in ActiveRecord (in milliseconds)
  grok {
    type => 'ror'
    exclude_tags => ["matched", "multiline"]
    singles => true
    match => ["log_entry", "^ *Completed (?<status>\d{3}).*in %{NUMBER:response_time}ms(?: \((?:Views: ?%{NUMBER:view_time}ms|ActiveRecord: ?%{NUMBER:ar_time}ms|[^\|]+: ?%{NUMBER}ms| ?\| ?)+\))?"]
    add_tag => ["request_complete", "matched"]
  }

  # Parses and extracts data from the request's asset "Served" entry
  #  ** Fields **
  #   status         - HTTP response status
  #   response_time  - total time it took to serve the requested asset (in milliseconds)
  grok {
    type => 'ror'
    exclude_tags => ["matched", "multiline"]
    singles => true
    match => ["log_entry", "^ *Served asset .* - (?<status>\d{3}).*\(%{NUMBER:response_time}ms\)"] 
    add_tag => ["request_asset_served", "matched"]
  }

  # 
  # Metric Gathering
  #

  # Request Response Time (non-asset)
  metrics {
    type => 'ror'
    tags => ["request_complete"]
    ignore_older_than => 60
    add_tag => ["metric"]

    timer => ["response_time", "%{response_time}",
              "view_time", "%{view_time}",
              "ar_time", "%{ar_time}"]
  }

  # Request Response Time (asset)
  metrics {
    type => 'ror'
    tags => ["request_asset_served"]
    ignore_older_than => 60
    add_tag => ["metric"]

    timer => ["asset_time", "%{response_time}"]
  }

  #
  # Clean Up
  #

  # Drop all event that didn't get matched above, unless they are ERRORs or FATALs
  grep {
    type => 'ror'
    exclude_tags => ["matched", "metric"]
    match => ["log_level", "(ERROR|FATAL)"]
  }

  # final clean up of the event before outputting
  mutate {
    type => 'ror'
    # trim leading and trailing whitespaces from "log_entry" and "format" fields
    strip => ["log_entry", "format"]

    # convert the time metrics to float type
    convert => ["response_time", "float",
                "view_time", "float",
                "ar_time", "float",
                "render_time", "float"]

    # remove the redundant "timestamp" field because the info is now stored in @timestamp
    remove => ["timestamp", "log_entry"]

    # remove the extra "_grokparsefailure" tag injected by tag_on_failure in grok
    remove_tag => ["_grokparsefailure", "matched"]
  }
}
